{"version":3,"sources":["app_component/wether.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","celsius","min","max","minmaxTemp","tempMin","tempMax","description","Form","dismissible","role","type","onClick","this","hideAlert","onSubmit","loadWeather","name","autoComplete","placeholder","error","React","Component","App","e","a","async","setState","getWeather","preventDefault","target","elements","value","country","fetch","api_call","json","response","sys","calculateCelsius","main","temp","temp_max","temp_min","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeId","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c5ecc1c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Weather = props => {\n  return (\n    <div className=\"container text-light\">\n      <div className=\"cards pt-4\">\n        <h1>{props.city}</h1>\n        <h5 className=\"py-4\">\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\n        </h5>\n\n        {props.celsius ? <h1 className=\"py-2\">{props.celsius}&deg;</h1> : null}\n\n        {/* Show max and min temp */}\n        {minmaxTemp(props.tempMin, props.tempMax)}\n\n        <h4 className=\"py-3\">{props.description}</h4>\n      </div>\n    </div>\n  );\n};\n\nfunction minmaxTemp(min, max) {\n  if (min && max)\n    return (\n      <h3>\n        <span className=\"px-4\">{min}&deg;</span>\n        <span className=\"px-4\">{max}&deg;</span>\n      </h3>\n    );\n}\nexport default Weather;\n","import React from \"react\";\nimport \"./form.style.css\";\n\nclass Form extends React.Component {\n  error() {\n    return (\n      <div className=\"col-12 py-2\">\n        <div\n          className=\"alert alert-warning alert-dismissible fade show\"\n          dismissible=\"true\"\n          role=\"alert\"\n        >\n          Please Enter City And Country\n          <button\n            type=\"button\"\n            className=\"close\"\n            onClick={this.props.hideAlert}\n          >\n            <span>&times;</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.props.loadWeather}>\n          <div className=\"row\">\n            <div className=\"col-md-3 offset-md-2\">\n              <input\n                type=\"text\"\n                name=\"city\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"City\"\n              />\n            </div>\n            <div className=\"col-md-3\">\n              <input\n                type=\"text\"\n                name=\"country\"\n                autoComplete=\"off\"\n                className=\"form-control\"\n                placeholder=\"Country\"\n              />\n            </div>\n            <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n              <button className=\"btn btn-warning\">Get Weather</button>\n            </div>\n          </div>\n        </form>\n        <div>{this.props.error ? this.error() : null}</div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\nimport Weather from \"./app_component/wether.component\";\r\nimport Form from \"./app_component/form.component\";\r\n\r\nconst API_KEY = \"b0524f26682bfdea40e0a4d3d2d08b4e\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country: undefined,\r\n      icon: undefined,\r\n      main: undefined,\r\n      celsius: undefined,\r\n      tempMax: undefined,\r\n      tempMin: undefined,\r\n      description: \"\",\r\n      error: false\r\n    };\r\n\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\"\r\n    };\r\n  }\r\n\r\n  getWeatherIcon(icon, rangeId) {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId <= 232:\r\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        this.setState({ icon: this.weatherIcon.Drizzle });\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 231:\r\n        this.setState({ icon: this.weatherIcon.Rain });\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        this.setState({ icon: this.weatherIcon.Snow });\r\n        break;\r\n      case rangeId >= 700 && rangeId <= 781:\r\n        this.setState({ icon: this.weatherIcon.Atmosphere });\r\n        break;\r\n      case rangeId === 800:\r\n        this.setState({ icon: this.weatherIcon.Clear });\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n    }\r\n  }\r\n\r\n  calculateCelsius(temp) {\r\n    return Math.floor(temp - 273.15);\r\n  }\r\n\r\n  hideAlert = async e => {\r\n    this.setState({\r\n      error: false\r\n    });\r\n  };\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city?.value;\r\n    const country = e.target.elements.country?.value;\r\n\r\n    if (city && country) {\r\n      const api_call = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\r\n      );\r\n\r\n      const response = await api_call.json();\r\n\r\n      this.setState({\r\n        city: `${response.name}, ${response.sys.country}`,\r\n        celsius: this.calculateCelsius(response.main.temp),\r\n        tempMax: this.calculateCelsius(response.main.temp_max),\r\n        tempMin: this.calculateCelsius(response.main.temp_min),\r\n        description: response.weather[0].description,\r\n        error: false\r\n      });\r\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\r\n    } else {\r\n      this.setState({\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form\r\n          hideAlert={this.hideAlert}\r\n          loadWeather={this.getWeather}\r\n          error={this.state.error}\r\n        />\r\n        <Weather\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          celsius={this.state.celsius}\r\n          tempMax={this.state.tempMax}\r\n          tempMin={this.state.tempMin}\r\n          description={this.state.description}\r\n          weatherIcon={this.state.icon}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}